# Client port of 4222 on all interfaces
server_name: "sctmp"

port: 4222

# HTTP monitoring port
# monitor_port: 8222

jetstream {
   store_dir: datastore
}

# This is for clustering multiple servers together.
# cluster {
#   # It is recommended to set a cluster name
#   name: "sctmp_nats_cluster"

#   # Route connections to be received on any interface on port 6222
#   port: 6222

#   # Routes are protected, so need to use them with --routes flag
#   # e.g. --routes=nats-route://ruser:T0pS3cr3t@otherdockerhost:6222
#   authorization {
#     user: guest
#     password: guest
#     timeout: 2
#   }

#   # Routes are actively solicited and connected to from this server.
#   # This Docker image has none by default, but you can pass a
#   # flag to the nats-server docker image to create one to an existing server.
#   routes = []
# }

mqtt {
    # Specify a host and port to listen for websocket connections
    #
    # listen: "host:port"
    # It can also be configured with individual parameters,
    # namely host and port.
    #    
    # host: "hostname"
    port: 1883

    # TLS configuration.
    #
    # tls {
        # cert_file: "/path/to/cert.pem"
        # key_file: "/path/to/key.pem"

        # Root CA file
        #
        # ca_file: "/path/to/ca.pem"

        # If true, require and verify client certificates.
        #
        # verify: true

        # TLS handshake timeout in fractional seconds.
        #
        # timeout: 2.0

        # If true, require and verify client certificates and map certificate
        # values for authentication purposes.
        #
        # verify_and_map: true
    # }

    # If no user name is provided when an MQTT client connects, will default
    # this user name in the authentication phase. If specified, this will
    # override, for MQTT clients, any `no_auth_user` value defined in the
    # main configuration file.
    # Note that this is not compatible with running the server in operator mode.
    #
    # no_auth_user: "my_username_for_apps_not_providing_credentials"

    # See below to know what is the normal way of limiting MQTT clients
    # to specific users.
    # If there are no users specified in the configuration, this simple authorization
    # block allows you to override the values that would be configured in the
    # equivalent block in the main section.
    #
    authorization {
    #     # If this is specified, the client has to provide the same username
    #     # and password to be able to connect.
        username: "guest"
        password: "guest"
    #
    #     # If this is specified, the password field in the CONNECT packet has to
    #     # match this token.
    #     # token: "my_token"
    #
    #     # This overrides the main's authorization timeout. For consistency
    #     # with the main's authorization configuration block, this is expressed
    #     # as a number of seconds.
        timeout: 2.0
    }

    # This is the amount of time after which a QoS 1 message sent to
    # a client is redelivered as a DUPLICATE if the server has not
    # received the PUBACK packet on the original Packet Identifier.
    # The value has to be positive.
    # Zero will cause the server to use the default value (30 seconds).
    # Note that changes to this option is applied only to new MQTT subscriptions.
    #
    # Expressed as a time duration, with "s", "m", "h" indicating seconds,
    # minutes and hours respectively. For instance "10s" for 10 seconds,
    # "1m" for 1 minute, etc...
    #
    # ack_wait: "1m"

    # This is the amount of QoS 1 messages the server can send to
    # a subscription without receiving any PUBACK for those messages.
    # The valid range is [0..65535].
    #
    # The total of subscriptions' max_ack_pending on a given session cannot
    # exceed 65535. Attempting to create a subscription that would bring
    # the total above the limit would result in the server returning 0x80
    # in the SUBACK for this subscription.
    # Due to how the NATS Server handles the MQTT "#" wildcard, each
    # subscription ending with "#" will use 2 times the max_ack_pending value.
    # Note that changes to this option is applied only to new subscriptions.
    #
    # max_ack_pending: 100
}